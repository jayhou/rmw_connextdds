_connextdds_cleanup()
{
    unset _CONNEXTDDS_DIR_BUILD \
          _CONNEXTDDS_ARCH \
          _CONNEXTDDS_DIR_ENV \
          _CONNEXTDDS_DIR_ENV_SRC \
          _CONNEXTDDS_DIR_BUILD \
          _CONNEXTDDS_DIR_EXPORT \
          _CONNEXTDDS_BIN \
          _CONNEXTDDS_LIB \
          _PATH_VAR \
          _connext_prepend_unique_value
}

# function to prepend non-duplicate values to environment variables
# using colons as separators and avoiding trailing separators
# copied from https://github.com/ament/ament_package/blob/6c8acd25498d2674e7ad9d316b35d112ae1ab8c1/ament_package/template/package_level/local_setup.sh.in#L45-L94
# since this script can't assume that the package level script was sourced before
_connextdds_prepend_unique_value() {
    # arguments
    _listname="$1"
    _value="$2"
    #echo "listname $_listname"
    #eval echo "list value \$$_listname"
    #echo "value $_value"

    # check if the list contains the value
    eval _values=\"\$$_listname\"
    _duplicate=
    _connext_prepend_unique_value_IFS=$IFS
    IFS=":"
    if [ "$AMENT_SHELL" = "zsh" ]; then
        # convert array-like string into array
        # to wordaround SH_WORD_SPLIT not being set
        eval _values="(\"${=_values}\")"
    fi
    for _item in $_values; do
        # ignore empty strings
        if [ -z "$_item" ]; then
        continue
        fi
        if [ "$_item" = "$_value" ]; then
        _duplicate=1
        fi
    done
    unset _item

    # prepend only non-duplicates
    if [ -z "$_duplicate" ]; then
        # avoid trailing separator
        if [ -z "$_values" ]; then
        eval export $_listname=\"$_value\"
        #eval echo "set list \$$_listname"
        else
        # field separator must not be a colon
        unset IFS
        eval export $_listname=\"$_value:\$$_listname\"
        #eval echo "prepend list \$$_listname"
        fi
    fi
    IFS=$_connext_prepend_unique_value_IFS
    unset _connext_prepend_unique_value_IFS
    unset _duplicate
    unset _values

    unset _value
    unset _listname
}


_CONNEXTDDS_DIR_BUILD="@CONNEXTDDS_DIR@"
_CONNEXTDDS_ARCH="@CONNEXTDDS_ARCH@"

# detect if running on Darwin platform
if [ "$(uname -s)" = "Darwin" ]; then
    _PATH_VAR=DYLD_LIBRARY_PATH
else
    _PATH_VAR=LD_LIBRARY_PATH
fi

# Inspect environment for a Connext 6.x installation.
# Give priority to CONNEXTDDS_DIR to override connext_cmake_module
# which may have loaded and older Connext installation.
_CONNEXTDDS_DIR_ENV=""
if [ -n "${CONNEXTDDS_DIR}" -a -d "${CONNEXTDDS_DIR}" ]; then
    _CONNEXTDDS_DIR_ENV="${CONNEXTDDS_DIR}"
    _CONNEXTDDS_DIR_ENV_SRC=CONNEXTDDS_DIR
elif [ -n "${NDDSHOME}" -a -d "${NDDSHOME}" ]; then
    _CONNEXTDDS_DIR_ENV="${NDDSHOME}"
    _CONNEXTDDS_DIR_ENV_SRC=NDDSHOME
fi

# If Connext installation used at build-time is still available, use that one,
# otherwise inspect environment to see if another one is available.
if [ -d "${_CONNEXTDDS_DIR_BUILD}" ]; then
    # Warn about unused environment variable.
    
    if [ -n "${_CONNEXTDDS_DIR_ENV}" -a \
        "${_CONNEXTDDS_DIR_ENV}" != "${_CONNEXTDDS_DIR_BUILD}" -a \
        -z "${CONNEXTDDS_IGNORE_BUILD}" ]; then
        printf "[%s][%s] Using RTI Connext DDS installation \
configured during build-time (%s). The installation specified via %s (%s) \
will be ignored. Use variable CONNEXTDDS_IGNORE_BUILD to override this behavior.\n" \
            "@PROJECT_NAME@" \
            "warning" \
            "${_CONNEXTDDS_DIR_BUILD}" \
            "${_CONNEXTDDS_DIR_ENV_SRC}" \
            "${_CONNEXTDDS_DIR_ENV_SRC}"  1>&2
    fi
    _CONNEXTDDS_DIR_EXPORT="${_CONNEXTDDS_DIR_BUILD}"
else
    # Give priority to CONNEXTDDS_DIR to override connext_cmake_module
    # which may have loaded and older Connext installation.
    if [ -z "${_CONNEXTDDS_DIR_ENV}" -o ! -d "${_CONNEXTDDS_DIR_ENV}" ]; then
        printf "[%s][%s] No RTI Connext DDS installation specified via \
CONNEXTDDS_DIR or NDDSHOME. RTI Connext DDS will not be available unless you \
already added it to %s.\n" \
            "@PROJECT_NAME@" \
            "warning" \
            "${_PATH_VAR}" 1>&2
        _connextdds_cleanup
        return
    fi

    if [! -d "${_CONNEXTDDS_DIR_ENV}" ]; then
        printf "[%s][%s] Invalid %s (%s). RTI Connext DDS will not be available unless you \
already added it to %s.\n" \
            "@PROJECT_NAME@" \
            "warning" \
            "${_CONNEXTDDS_DIR_ENV}" \
            "${_CONNEXTDDS_DIR_ENV_SRC}" \
            "${_PATH_VAR}" 1>&2
        _connextdds_cleanup
        return
    fi

    _CONNEXTDDS_DIR_TO_USE="${_CONNEXTDDS_DIR_ENV}"
fi

_CONNEXTDDS_LIB="${_CONNEXTDDS_DIR_EXPORT}/lib/${_CONNEXTDDS_ARCH}"

if [ ! -d "${_CONNEXTDDS_LIB}" ]; then
    printf "[%s][%s] RTI Connext DDS library directory not found. \
Check that your installation contains libraries for architecture %s \
(expected: %s). \
RTI Connext DDS will not be available unless you already added the correct \
directory to %s and PATH.\n" \
            "@PROJECT_NAME@" \
            "warning" \
            "${_CONNEXTDDS_ARCH}" \
            "${_CONNEXTDDS_LIB}" \
            "${_PATH_VAR}" 1>&2
    _connextdds_cleanup
    return
fi

_CONNEXTDDS_BIN="${_CONNEXTDDS_DIR_EXPORT}/bin"

_connextdds_prepend_unique_value PATH "${_CONNEXTDDS_BIN}"
_connextdds_prepend_unique_value PATH "${_CONNEXTDDS_LIB}"
_connextdds_prepend_unique_value ${_PATH_VAR} "${_CONNEXTDDS_BIN}"
_connextdds_prepend_unique_value ${_PATH_VAR} "${_CONNEXTDDS_LIB}"

export CONNEXTDDS_DIR="${_CONNEXTDDS_DIR_EXPORT}" \
       CONNEXTDDS_ARCH="${_CONNEXTDDS_ARCH}" \
       ${_PATH_VAR} \
       PATH

if [ -n "${NDDSHOME}" -a "${NDDSHOME}" != "${CONNEXTDDS_DIR}" ]; then
    printf "[%s][%s] Both NDDSHOME (%s) and CONNEXTDDS_DIR (%s) detected. \
Make sure that the correct RTI Connext DDS 6.x installation has precedence in \
the environment:\n" \
        "@PROJECT_NAME@" \
        "warning" \
        "${NDDSHOME}" \
        "${CONNEXTDDS_DIR}"
        1>&2
    printf "[%s][%s] PATH='%s'\n" \
        "@PROJECT_NAME@" \
        "warning" \
        "${PATH}" 1>&2
    printf "[%s][%s] %s='%s'\n" \
        "@PROJECT_NAME@" \
        "warning" \
        "${_PATH_VAR}" \
        "$(eval "echo \${${_PATH_VAR}}")" 1>&2
fi

if [ -n "${VERBOSE}" ]; then
    printf "[%s][%s] CONNEXTDDS_DIR='%s'\n" \
        "@PROJECT_NAME@" \
        "info" \
        "${CONNEXTDDS_DIR}"
    printf "[%s][%s] CONNEXTDDS_ARCH='%s'\n" \
        "@PROJECT_NAME@" \
        "info" \
        "${CONNEXTDDS_ARCH}"
    printf "[%s][%s] PATH='%s'\n" \
        "@PROJECT_NAME@" \
        "info" \
        "${PATH}"
    printf "[%s][%s] %s='%s'\n" \
        "@PROJECT_NAME@" \
        "info" \
        "${_PATH_VAR}" \
        "$(eval "echo \${${_PATH_VAR}}")"
fi

_connextdds_cleanup

